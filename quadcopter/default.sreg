- Name: dummy
  # This regime shows a transition of the ball from the left to the right side
  # of the beam using a nonlinear controller

  # decide whether previous settings should remain or not. Typically regimes
  # become a lot shorter if you only overwrite the value that change
  # e.g. while varying a physical parameter
  clear previous: !!python/bool True

  # Class name of the SimulationModel that is to be simulated.
  # As you can see, not all parameters have to be given, all settings that are
  # not given here will be taken from the default values, defined in the class.
  Model:
    type: Dummy
    initial state: [0]

  # Class name and settings for the solver
  Solver:
    type: ODEInt
    # the measure rate controls how dense the returned data will be
    measure rate: 200
    end time: 60

  # Class Name of the controller
  Controller:
    type: Dummy

  Observer:
    type: QuadcopterEKF
    trajectory: dataset-room3_512_16
    tick divider: 20
    initial state: [1, 0, 0, 0, 0, 0, 0]
    P0ii: [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]
    Qii: [0.00001, 0.00001, 0.00001, 0.00001, 0.00001, 0.00001, 0.00001]
    Rii: [0.1, 0.1, 0.1, 0.00001]

- Name: room3_ekf
  # decide whether previous settings should remain or not. Typically regimes
  # become a lot shorter if you only overwrite the value that change
  # e.g. while varying a physical parameter
  clear previous: !!python/bool True

  # Class name of the SimulationModel that is to be simulated.
  # As you can see, not all parameters have to be given, all settings that are
  # not given here will be taken from the default values, defined in the class.
  Model:
    type: Dummy
    initial state: [0]

  # Class name and settings for the solver
  Solver:
    type: ODEInt
    # the measure rate controls how dense the returned data will be
    measure rate: 50
    end time: 25

  # Class Name of the controller
  Controller:
    type: Dummy

  Observer:
    type: QuadcopterEKF
    trajectory: dataset-room3_512_16
    tick divider: 20
    initial state: [1, 0, 0, 0, 0, 0, 0]
    P0ii: [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]
    Qii: [0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001]
    Rii: [1000, 1000, 1000, 0.00001]

- Name: uav3_ekf
  # decide whether previous settings should remain or not. Typically regimes
  # become a lot shorter if you only overwrite the value that change
  # e.g. while varying a physical parameter
  clear previous: !!python/bool True

  # Class name of the SimulationModel that is to be simulated.
  # As you can see, not all parameters have to be given, all settings that are
  # not given here will be taken from the default values, defined in the class.
  Model:
    type: Dummy
    initial state: [0]

  # Class name and settings for the solver
  Solver:
    type: ODEInt
    # the measure rate controls how dense the returned data will be
    measure rate: 50
    end time: 32

  # Class Name of the controller
  Controller:
    type: Dummy

  Observer:
    type: QuadcopterEKF
    trajectory: uav_2018-01-10-15-56-59
    tick divider: 20
    initial state: [0.73168887, 0.0, 0.0, .68163876, 0, 0, 0]
    P0ii: [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]
    Qii: [0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001]
    Rii: [1000, 1000, 1000, 0.00001]